type: function_js
category:
  - text
  - similarity
tutorial:
source: https://github.com/fabvalaaah/damerau-levenshtein-js
github:
description: "Calculates Damerau-Levenshtein distance between <string_1> and <string_2>."
arguments:
  - name: string_1
    type: STRING
    description:
  - name: string_2
    type: STRING
    description:
output:
  name: distance
  type: INT64
  description:
examples:
  - description: ""
    arguments:
      - "pyhtno"
      - "python"
    output: "2"
    region: ALL
code: |
  const initMatrix = (string_1, string_2) => {
    if (undefined == string_1 || undefined == string_2) {
      return null;
    }
    let d = [];
    for (let i = 0; i <= string_1.length; i++) {
      d[i] = [];
      d[i][0] = i;
    }
    for (let j = 0; j <= string_2.length; j++) {
      d[0][j] = j;
    }
    return d;
  };
  const damerau = (i, j, string_1, string_2, d, cost) => {
    if (i > 1 && j > 1 && string_1[i - 1] === string_2[j - 2] && string_1[i - 2] === string_2[j - 1]) {
      d[i][j] = Math.min.apply(null, [d[i][j], d[i - 2][j - 2] + cost]);
    }
  };
  if (
    undefined == string_1 ||
    undefined == string_2 ||
    "string" !== typeof string_1 ||
    "string" !== typeof string_2
  ) {
    return -1;
  }
  let d = initMatrix(string_1, string_2);
  if (null === d) {
    return -1;
  }
  for (var i = 1; i <= string_1.length; i++) {
    let cost;
    for (let j = 1; j <= string_2.length; j++) {
      if (string_1.charAt(i - 1) === string_2.charAt(j - 1)) {
        cost = 0;
      } else {
        cost = 1;
      }
      d[i][j] = Math.min.apply(null, [
        d[i - 1][j] + 1,
        d[i][j - 1] + 1,
        d[i - 1][j - 1] + cost
      ]);
      damerau(i, j, string_1, string_2, d, cost);
    }
  }
  return d[string_1.length][string_2.length];
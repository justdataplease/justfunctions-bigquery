type: procedure
category:
  - operations
  - date
  - featured
  - new
description: Generates a complete date calendar <table> with holidays for a given country and special days. Holidays are available for 2000-2030.
arguments:
  - name: table_name
    type: string
  - name: start_date
    type: string
  - name: end_date
    type: string
  - name: country
    type: string
output:
  name: date_calendar
  type: any type
examples:
  - description: ""
    arguments:
      - justfunctions.test.date_calendar
      - 2020-01-01
      - 2023-01-01
      - GR
    output: |
      - date_id: 20200101
      - date: 2020-01-01
      - epoch: 1577836800
      - day_suffix: 1th
      - day_name: Wednesday
      - day_name_abbr: Wed
      - day_of_week: 4
      - day_of_month: 1
      - day_of_quarter: 1
      - day_of_year: 1
      - week_of_month: 1
      - week_of_year: 1
      - week_of_year_iso: 2020-W01-3
      - month: 1
      - month_name: January
      - month_name_abbr: Jan
      - quarter: 1
      - quarter_name: Q1
      - year: 2020
      - start_of_week: 2019-12-30
      - start_of_week_saturday: 2019-12-28
      - start_of_month: 2020-01-01
      - mid_of_month: 2020-01-15
      - start_of_quarter: 2020-01-01
      - start_of_year: 2020-01-01
      - end_of_week: 2020-01-03
      - end_of_month: 2020-01-31
      - end_of_quarter: 2020-03-31
      - end_of_year: 2020-12-31
      - start_of_fiscal_year: 2019-10-01
      - end_of_fiscal_year: 2020-09-30
      - yyyymm: 202001
      - yyyymmdd: 20200101
      - month_desc: 2020-Jan
      - quarter_desc: 2020-Q1
      - week_desc: 2020-W1
      - is_weekend: FALSE
      - season: Winter
      - holiday_name: Πρωτοχρονιά
      - holiday_country: gr
      - special_day_name : New Year's Day
    region: ALL
code: |
    -- Drop the table if it exists
    EXECUTE IMMEDIATE 'DROP TABLE IF EXISTS ' || table_name;

    -- Create the date_calendar table
    EXECUTE IMMEDIATE 'CREATE TABLE ' || table_name || ' (date_id INT64 NOT NULL, date DATE NOT NULL, epoch INT64 NOT NULL, day_suffix STRING NOT NULL, day_name STRING NOT NULL, day_name_abbr STRING NOT NULL, day_of_week INT64 NOT NULL, day_of_month INT64 NOT NULL, day_of_quarter INT64 NOT NULL, day_of_year INT64 NOT NULL, week_of_month INT64 NOT NULL, week_of_year INT64 NOT NULL, week_of_year_iso STRING NOT NULL, month_ INT64 NOT NULL, month_name STRING NOT NULL, month_name_abbr STRING NOT NULL, quarter INT64 NOT NULL, quarter_name STRING NOT NULL, year INT64 NOT NULL, start_of_week DATE NOT NULL,start_of_week_saturday DATE NOT NULL, start_of_month DATE NOT NULL, mid_of_month DATE NOT NULL, start_of_quarter DATE NOT NULL, start_of_year DATE NOT NULL, end_of_week DATE NOT NULL, end_of_month DATE NOT NULL, end_of_quarter DATE NOT NULL, end_of_year DATE NOT NULL,start_of_fiscal_year DATE NOT NULL,end_of_fiscal_year DATE NOT NULL, yyyymm STRING NOT NULL, yyyymmdd STRING NOT NULL, month_desc STRING, quarter_desc STRING, week_desc STRING, is_weekend BOOL NOT NULL, season STRING, holiday_name STRING, holiday_country STRING, special_day_name STRING);';

    -- Populate the table
    EXECUTE IMMEDIATE 'INSERT INTO ' || table_name || ' WITH date_range AS (SELECT date FROM UNNEST(GENERATE_DATE_ARRAY("' || start_date || '","' || end_date  || '")) AS date) SELECT CAST(FORMAT_DATE("%Y%m%d", date) AS INT64) AS date_id, date AS date, UNIX_SECONDS(TIMESTAMP(date)) AS epoch, CONCAT(CAST(EXTRACT(DAY FROM date) AS STRING), "th") AS day_suffix, FORMAT_DATE("%A", date) AS day_name, FORMAT_DATE("%a", date) AS day_name_abbr, EXTRACT(DAYOFWEEK FROM date) AS day_of_week, EXTRACT(DAY FROM date) AS day_of_month, EXTRACT(DAY FROM date) - EXTRACT(DAY FROM DATE_TRUNC(date, QUARTER)) + 1 AS day_of_quarter, EXTRACT(DAYOFYEAR FROM date) AS day_of_year, EXTRACT(WEEK FROM date) - EXTRACT(WEEK FROM DATE_TRUNC(date, MONTH)) + 1 AS week_of_month, CAST(FORMAT_DATE("%V", date) AS INT64) AS week_of_year, FORMAT_DATE("%G-W%V-%u", date) AS week_of_year_iso, EXTRACT(MONTH FROM date) AS month, FORMAT_DATE("%B", date) AS month_name, FORMAT_DATE("%b", date) AS month_name_abbr, EXTRACT(QUARTER FROM date) AS quarter, CONCAT("Q", CAST(EXTRACT(QUARTER FROM date) AS STRING)) AS quarter_name, EXTRACT(YEAR FROM date) AS year, DATE_TRUNC(date, WEEK(MONDAY)) AS start_of_week,DATE_TRUNC(date, WEEK(SATURDAY)) AS start_of_week_saturday, DATE_TRUNC(date, MONTH) AS start_of_month, DATE_ADD(DATE_TRUNC(date, MONTH), INTERVAL 14 DAY) AS mid_of_month, DATE_TRUNC(date, QUARTER) AS start_of_quarter, DATE_TRUNC(date, YEAR) AS start_of_year, DATE_ADD(DATE_TRUNC(date, WEEK(SATURDAY)), INTERVAL 6 DAY) AS end_of_week, LAST_DAY(date, MONTH) AS end_of_month, LAST_DAY(date, QUARTER) AS end_of_quarter, LAST_DAY(date, YEAR) AS end_of_year,     CAST(IF(EXTRACT(MONTH FROM date) >= 10,     DATE(EXTRACT(YEAR FROM date), 10, 1),    DATE(EXTRACT(YEAR FROM date) - 1, 10, 1)) AS DATE) AS start_of_fiscal_year,CAST(IF(EXTRACT(MONTH FROM date) >= 10,     DATE(EXTRACT(YEAR FROM date) + 1, 9, 30),     DATE(EXTRACT(YEAR FROM date), 9, 30) ) AS DATE) AS end_of_fiscal_year,FORMAT_DATE("%Y%m", date) AS yyyymm, FORMAT_DATE("%Y%m%d", date) AS yyyymmdd, CONCAT(CAST(EXTRACT(YEAR FROM date) AS STRING), "-", FORMAT_DATE("%b", date)) AS month_desc, CONCAT(CAST(EXTRACT(YEAR FROM date) AS STRING), "-Q", CAST(EXTRACT(QUARTER FROM date) AS STRING)) AS quarter_desc, CONCAT(CAST(EXTRACT(YEAR FROM date) AS STRING), "-","W",CAST(FORMAT_DATE("%V", date) AS INT64)) AS week_desc, CASE WHEN EXTRACT(DAYOFWEEK FROM date) IN (6, 7) THEN TRUE ELSE FALSE END AS is_weekend, CASE WHEN EXTRACT(MONTH FROM date) IN (3, 4, 5) THEN "Spring" WHEN EXTRACT(MONTH FROM date) IN (6, 7, 8) THEN "Summer" WHEN EXTRACT(MONTH FROM date) IN (9, 10, 11) THEN "Autumn" WHEN EXTRACT(MONTH FROM date) IN (12, 1, 2) THEN "Winter" ELSE "Unknown" END season, holiday_name, holiday_country, special_day_name FROM date_range d LEFT JOIN (SELECT * FROM justfunctions._dataset_id_.date_holidays WHERE holiday_country=UPPER("' || country || '")) dh ON dh.holiday_date=d.date LEFT JOIN justfunctions._dataset_id_.date_special_days sd ON sd.special_day_date=d.date;';
  
  
